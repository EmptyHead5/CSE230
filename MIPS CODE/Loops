for ($t1 = 0; $t1 < $t2; $t1++) {
    $t3 = $t3 << 1;
}

addi $t1, $zero, 0      # 初始化 $t1 = 0
Loop:
slt $t4, $t1, $t2       # 比较 $t1 和 $t2，如果 $t1 < $t2，则 $t4 = 1，否则 $t4 = 0
beq $t4, $zero, Exit    # 如果 $t4 == 0（即 $t1 >= $t2），跳转到 Exit，退出循环
      这两行代码其实就是完成了一件事，确保$t1 < $t2，
      在“slt $t4, $t1, $t2  “ 如果如果 $t1 < $t2，则 $t4 = 1，否则 $t4 = 0
      之后我们添加beq $t4, $zero, Exit  ， $t4 == 0，此刻也就代表着在前一代码内$t1 >= $t2，则for循环条件不成立，超出范围
sll $t3, $t3, 1         # 否则，执行 $t3 = $t3 << 1
addi $t1, $t1, 1        # $t1 = $t1 + 1 #$t1++

j Loop                  # 返回 Loop，继续循环
Exit:



对于 BNE (Branch if Not Equal) 和 BEQ (Branch if Equal) 指令，它们的基本工作机制是基于对两个操作数的比较，决定是否跳转到指定的目标指令。下面是补充说明：

BNE（Branch if Not Equal）：

作用：比较两个操作数（通常是寄存器中的值），如果它们不相等，则跳转到目标地址执行后续指令；如果它们相等，则不跳转，继续执行顺序执行的下一条指令。
结构：BNE 目标地址
逻辑：如果寄存器1 ≠ 寄存器2，跳转到目标地址；否则继续执行下一条指令。

BEQ（Branch if Equal）：

作用：比较两个操作数，如果它们相等，则跳转到目标地址执行后续指令；如果它们不相等，则不跳转，继续执行顺序执行的下一条指令。
结构：BEQ 目标地址
逻辑：如果寄存器1 = 寄存器2，跳转到目标地址；否则继续执行下一条指令。
总结：

BNE 是在操作数不相等时跳转。
BEQ 是在操作数相等时跳转。      注意，都说在跳转！！！！！
