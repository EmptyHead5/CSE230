structural hazard： 是指由于硬件资源共享而导致的冲突。这种情况发生在两个或多个指令同时需要访问同一个硬件资源，而该资源在一个时钟周期内只能处理一个请求。，相邻的两个指令使用了同硬件（如ALU）
  add $t0, $t1, $t2   # 第一条指令使用ALU
  lw $t3, 4($t4)      # 第二条指令在计算地址时也需要使用ALU

Data hazard: 是指再多个指令中，后一指令的结果依赖于前一指令的输出 
  add   $s0, $t0, $t1
  sub   $t2, $s0, $t3  
  Forwarding: 允许前一指令在不写入结果寄存器之前就被后一指令进行使用（这个功能已经被提前内置进MIPS内）
control hazard:是指在处理器流水线中，由于分支指令（如条件分支、跳转等）导致的冒险。

https://www.youtube.com/watch?v=8yxrT1isnpE
